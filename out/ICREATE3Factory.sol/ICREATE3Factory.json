{"abi":[{"type":"function","name":"deploy","inputs":[{"name":"salt","type":"bytes32","internalType":"bytes32"},{"name":"creationCode","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"deployed","type":"address","internalType":"address"}],"stateMutability":"payable"},{"type":"function","name":"getDeployed","inputs":[{"name":"deployer","type":"address","internalType":"address"},{"name":"salt","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"deployed","type":"address","internalType":"address"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"deploy(bytes32,bytes)":"cdcb760a","getDeployed(address,bytes32)":"50f1c464"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"creationCode\",\"type\":\"bytes\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"deployed\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"getDeployed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"deployed\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"zefram.eth\",\"kind\":\"dev\",\"methods\":{\"deploy(bytes32,bytes)\":{\"details\":\"The provided salt is hashed together with msg.sender to generate the final salt\",\"params\":{\"creationCode\":\"The creation code of the contract to deploy\",\"salt\":\"The deployer-specific salt for determining the deployed contract's address\"},\"returns\":{\"deployed\":\"The address of the deployed contract\"}},\"getDeployed(address,bytes32)\":{\"details\":\"The provided salt is hashed together with the deployer address to generate the final salt\",\"params\":{\"deployer\":\"The deployer account that will call deploy()\",\"salt\":\"The deployer-specific salt for determining the deployed contract's address\"},\"returns\":{\"deployed\":\"The address of the contract that will be deployed\"}}},\"title\":\"Factory for deploying contracts to deterministic addresses via CREATE3\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deploy(bytes32,bytes)\":{\"notice\":\"Deploys a contract using CREATE3\"},\"getDeployed(address,bytes32)\":{\"notice\":\"Predicts the address of a deployed contract\"}},\"notice\":\"Enables deploying contracts using CREATE3. Each deployer (msg.sender) has its own namespace for deployed addresses.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/create3/ICREATE3Factory.sol\":\"ICREATE3Factory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@balancer-labs/=node_modules/@balancer-labs/\",\":@crytic/=node_modules/@crytic/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":@prb/=node_modules/@prb/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=node_modules/forge-std/\",\":hardhat/=node_modules/hardhat/\",\":solady/=node_modules/solady/\",\":solmate/=node_modules/solmate/\"]},\"sources\":{\"contracts/interfaces/create3/ICREATE3Factory.sol\":{\"keccak256\":\"0x9df313232db23470517e56750dc1acd386eb69a880e90561dbfbbd3834a13822\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://6bf6c47232043864e6dae8b210fb16aeacc5c03d492e1fe9d814d287a1103d74\",\"dweb:/ipfs/QmVdPfZfN3Pvpa9jbtZgCpoTaM79RiRa7MHLGrBbrkBRWG\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.19+commit.7dd6d404"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"bytes","name":"creationCode","type":"bytes"}],"stateMutability":"payable","type":"function","name":"deploy","outputs":[{"internalType":"address","name":"deployed","type":"address"}]},{"inputs":[{"internalType":"address","name":"deployer","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getDeployed","outputs":[{"internalType":"address","name":"deployed","type":"address"}]}],"devdoc":{"kind":"dev","methods":{"deploy(bytes32,bytes)":{"details":"The provided salt is hashed together with msg.sender to generate the final salt","params":{"creationCode":"The creation code of the contract to deploy","salt":"The deployer-specific salt for determining the deployed contract's address"},"returns":{"deployed":"The address of the deployed contract"}},"getDeployed(address,bytes32)":{"details":"The provided salt is hashed together with the deployer address to generate the final salt","params":{"deployer":"The deployer account that will call deploy()","salt":"The deployer-specific salt for determining the deployed contract's address"},"returns":{"deployed":"The address of the contract that will be deployed"}}},"version":1},"userdoc":{"kind":"user","methods":{"deploy(bytes32,bytes)":{"notice":"Deploys a contract using CREATE3"},"getDeployed(address,bytes32)":{"notice":"Predicts the address of a deployed contract"}},"version":1}},"settings":{"remappings":["@balancer-labs/=node_modules/@balancer-labs/","@crytic/=node_modules/@crytic/","@openzeppelin/=node_modules/@openzeppelin/","@prb/=node_modules/@prb/","eth-gas-reporter/=node_modules/eth-gas-reporter/","forge-std/=node_modules/forge-std/","hardhat/=node_modules/hardhat/","solady/=node_modules/solady/","solmate/=node_modules/solmate/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/interfaces/create3/ICREATE3Factory.sol":"ICREATE3Factory"},"evmVersion":"paris","libraries":{}},"sources":{"contracts/interfaces/create3/ICREATE3Factory.sol":{"keccak256":"0x9df313232db23470517e56750dc1acd386eb69a880e90561dbfbbd3834a13822","urls":["bzz-raw://6bf6c47232043864e6dae8b210fb16aeacc5c03d492e1fe9d814d287a1103d74","dweb:/ipfs/QmVdPfZfN3Pvpa9jbtZgCpoTaM79RiRa7MHLGrBbrkBRWG"],"license":"AGPL-3.0"}},"version":1},"id":20}